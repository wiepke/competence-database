/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.CommentData = factory(root.SwaggerJsClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CommentData model module.
   * @module model/CommentData
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CommentData</code>.
   * @alias module:model/CommentData
   * @class
   * @param linkId {String} the id of the evidence the comment references
   * @param user {String} the id of the user creating the comment
   * @param text {String} the plain text of the comment
   */
  var exports = function(linkId, user, text) {
    var _this = this;




    _this['linkId'] = linkId;
    _this['user'] = user;
    _this['text'] = text;

  };

  /**
   * Constructs a <code>CommentData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CommentData} obj Optional instance to populate.
   * @return {module:model/CommentData} The populated <code>CommentData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('created')) {
        obj['created'] = ApiClient.convertToType(data['created'], 'Integer');
      }
      if (data.hasOwnProperty('commentId')) {
        obj['commentId'] = ApiClient.convertToType(data['commentId'], 'String');
      }
      if (data.hasOwnProperty('commentedCommentId')) {
        obj['commentedCommentId'] = ApiClient.convertToType(data['commentedCommentId'], 'String');
      }
      if (data.hasOwnProperty('linkId')) {
        obj['linkId'] = ApiClient.convertToType(data['linkId'], 'String');
      }
      if (data.hasOwnProperty('user')) {
        obj['user'] = ApiClient.convertToType(data['user'], 'String');
      }
      if (data.hasOwnProperty('text')) {
        obj['text'] = ApiClient.convertToType(data['text'], 'String');
      }
      if (data.hasOwnProperty('courseContext')) {
        obj['courseContext'] = ApiClient.convertToType(data['courseContext'], 'String');
      }
    }
    return obj;
  }

  /**
   * the date created
   * @member {Integer} created
   */
  exports.prototype['created'] = undefined;
  /**
   * the id of the comment; will be generated
   * @member {String} commentId
   */
  exports.prototype['commentId'] = undefined;
  /**
   * the id of the comment this comment references
   * @member {String} commentedCommentId
   */
  exports.prototype['commentedCommentId'] = undefined;
  /**
   * the id of the evidence the comment references
   * @member {String} linkId
   */
  exports.prototype['linkId'] = undefined;
  /**
   * the id of the user creating the comment
   * @member {String} user
   */
  exports.prototype['user'] = undefined;
  /**
   * the plain text of the comment
   * @member {String} text
   */
  exports.prototype['text'] = undefined;
  /**
   * the id of the course the link is attached to
   * @member {String} courseContext
   */
  exports.prototype['courseContext'] = undefined;



  return exports;
}));


