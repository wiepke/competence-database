/**
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityEntry', 'model/CompetenceData', 'model/CourseData', 'model/LearningTemplateData', 'model/LearningTemplateResultSet', 'model/ReflectiveQuestionData', 'model/ReflectiveQuestionAnswerData', 'model/UserData', 'model/CommentData', 'model/UserTree', 'model/StringList', 'model/BadgeData', 'model/CatchwordXMLTree', 'model/CompetenceLinksMap', 'model/CompetenceXMLTree', 'model/UserCourseListItem', 'model/SuggestedCompetenceGrid', 'model/OperatorXMLTree', 'model/UserOverview', 'model/Graph', 'model/ReflectiveQuestionAnswerHolder', 'model/UserCompetenceProgress', 'model/UserProgress', 'model/EPOSTypeWrapper', 'model/EvidenceData', 'model/MapWrapperUserCourseListItemDouble', 'model/SyncDataSet', 'model/ReflectiveAssessmentsListHolder', 'model/HierarchyChangeSet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ActivityEntry'), require('./CompetenceData'), require('./CourseData'), require('./LearningTemplateData'), require('./LearningTemplateResultSet'), require('./ReflectiveQuestionData'), require('./ReflectiveQuestionAnswerData'), require('./UserData'), require('./CommentData'), require('./UserTree'), require('./StringList'), require('./BadgeData'), require('./CatchwordXMLTree'), require('./CompetenceLinksMap'), require('./CompetenceXMLTree'), require('./UserCourseListItem'), require('./SuggestedCompetenceGrid'), require('./OperatorXMLTree'), require('./UserOverview'), require('./Graph'), require('./ReflectiveQuestionAnswerHolder'), require('./UserCompetenceProgress'), require('./UserProgress'), require('./EPOSTypeWrapper'), require('./EvidenceData'), require('./MapWrapperUserCourseListItemDouble'), require('./SyncDataSet'), require('./ReflectiveAssessmentsListHolder'), require('./HierarchyChangeSet'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.DefaultApi = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.ActivityEntry, root.SwaggerJsClient.CompetenceData, root.SwaggerJsClient.CourseData, root.SwaggerJsClient.LearningTemplateData, root.SwaggerJsClient.LearningTemplateResultSet, root.SwaggerJsClient.ReflectiveQuestionData, root.SwaggerJsClient.ReflectiveQuestionAnswerData, root.SwaggerJsClient.UserData, root.SwaggerJsClient.CommentData, root.SwaggerJsClient.UserTree, root.SwaggerJsClient.StringList, root.SwaggerJsClient.BadgeData, root.SwaggerJsClient.CatchwordXMLTree, root.SwaggerJsClient.CompetenceLinksMap, root.SwaggerJsClient.CompetenceXMLTree, root.SwaggerJsClient.UserCourseListItem, root.SwaggerJsClient.SuggestedCompetenceGrid, root.SwaggerJsClient.OperatorXMLTree, root.SwaggerJsClient.UserOverview, root.SwaggerJsClient.Graph, root.SwaggerJsClient.ReflectiveQuestionAnswerHolder, root.SwaggerJsClient.UserCompetenceProgress, root.SwaggerJsClient.UserProgress, root.SwaggerJsClient.EPOSTypeWrapper, root.SwaggerJsClient.EvidenceData, root.SwaggerJsClient.MapWrapperUserCourseListItemDouble, root.SwaggerJsClient.SyncDataSet, root.SwaggerJsClient.ReflectiveAssessmentsListHolder, root.SwaggerJsClient.HierarchyChangeSet);
  }
}(this, function(ApiClient, ActivityEntry, CompetenceData, CourseData, LearningTemplateData, LearningTemplateResultSet, ReflectiveQuestionData, ReflectiveQuestionAnswerData, UserData, CommentData, UserTree, StringList, BadgeData, CatchwordXMLTree, CompetenceLinksMap, CompetenceXMLTree, UserCourseListItem, SuggestedCompetenceGrid, OperatorXMLTree, UserOverview, Graph, ReflectiveQuestionAnswerHolder, UserCompetenceProgress, UserProgress, EPOSTypeWrapper, EvidenceData, MapWrapperUserCourseListItemDouble, SyncDataSet, ReflectiveAssessmentsListHolder, HierarchyChangeSet) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi.
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addActivity operation.
     * @callback module:api/DefaultApi~addActivityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add activity to the ones stored in the db
     * can only store activities in the db  and not the lms since the lms needs user credentials and no interface is implemented to add activities  to the lms indirectly. We assume that activities will appear in the lms automatically. If the  activities in the lms are needed, the course api can provide these.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityEntry} opts.body
     * @param {module:api/DefaultApi~addActivityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addActivity = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/activities', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addActivity_0 operation.
     * @callback module:api/DefaultApi~addActivity_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * link activity and competence
     * The activity will be suggested for the competence if linked.
     * @param {String} competenceId
     * @param {module:model/ActivityEntry} body the id of the activity to link the competence to
     * @param {module:api/DefaultApi~addActivity_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addActivity_0 = function(competenceId, body, callback) {
      var postBody = body;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling addActivity_0";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling addActivity_0";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/activities/links/competences/{competenceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCompetence operation.
     * @callback module:api/DefaultApi~addCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a competence to db
     *
     * @param {String} competenceId the plain text string of the competence
     * @param {Object} opts Optional parameters
     * @param {module:model/CompetenceData} opts.body
     * @param {module:api/DefaultApi~addCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCompetence = function(competenceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling addCompetence";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences/{competenceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCompetenceToModel operation.
     * @callback module:api/DefaultApi~addCompetenceToModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {String} opts.operator
     * @param {Array.<String>} opts.catchwords
     * @param {Array.<String>} opts.superCompetences
     * @param {Array.<String>} opts.subCompetences
     * @param {String} opts.learningTemplateName
     * @param {module:api/DefaultApi~addCompetenceToModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCompetenceToModel = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence'],
        'operator': opts['operator'],
        'catchwords': this.apiClient.buildCollectionParam(opts['catchwords'], 'multi'),
        'superCompetences': this.apiClient.buildCollectionParam(opts['superCompetences'], 'multi'),
        'subCompetences': this.apiClient.buildCollectionParam(opts['subCompetences'], 'multi'),
        'learningTemplateName': opts['learningTemplateName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/addOne', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCourse operation.
     * @callback module:api/DefaultApi~addCourseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create local course in db
     * This will not create a course in the lms since this would require different permissions and the interface is not implemented in the lms adaptor.
     * @param {String} courseId
     * @param {Object} opts Optional parameters
     * @param {module:model/CourseData} opts.body
     * @param {module:api/DefaultApi~addCourseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCourse = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw "Missing the required parameter 'courseId' when calling addCourse";
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/courses/{courseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLearningTemplate operation.
     * @callback module:api/DefaultApi~addLearningTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a learningtemplate
     *
     * @param {String} learningtemplateId
     * @param {Object} opts Optional parameters
     * @param {module:model/LearningTemplateData} opts.body
     * @param {module:api/DefaultApi~addLearningTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLearningTemplate = function(learningtemplateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'learningtemplateId' is set
      if (learningtemplateId == undefined || learningtemplateId == null) {
        throw "Missing the required parameter 'learningtemplateId' when calling addLearningTemplate";
      }


      var pathParams = {
        'learningtemplateId': learningtemplateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/learningtemplates/{learningtemplateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLearningTemplateSelection operation.
     * @callback module:api/DefaultApi~addLearningTemplateSelectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/LearningTemplateResultSet} opts.body
     * @param {module:api/DefaultApi~addLearningTemplateSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLearningTemplateSelection = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplate/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLearningTemplateSelection_0 operation.
     * @callback module:api/DefaultApi~addLearningTemplateSelection_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.groupId
     * @param {String} opts.selectedTemplate
     * @param {module:api/DefaultApi~addLearningTemplateSelection_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLearningTemplateSelection_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'groupId': opts['groupId'],
        'selectedTemplate': opts['selectedTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplates/selected/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addReflectiveQuestionToCompetence operation.
     * @callback module:api/DefaultApi~addReflectiveQuestionToCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * persist a reflective question to the competence
     *
     * @param {Object} opts Optional parameters
     * @param {module:model/ReflectiveQuestionData} opts.body
     * @param {module:api/DefaultApi~addReflectiveQuestionToCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addReflectiveQuestionToCompetence = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences/questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addReflectiveQuestionsAnswersForCompetence operation.
     * @callback module:api/DefaultApi~addReflectiveQuestionsAnswersForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add answers to this reflective question
     *
     * @param {Object} opts Optional parameters
     * @param {module:model/ReflectiveQuestionAnswerData} opts.body
     * @param {module:api/DefaultApi~addReflectiveQuestionsAnswersForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addReflectiveQuestionsAnswersForCompetence = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences/questions/answers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addUser operation.
     * @callback module:api/DefaultApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add user to local db
     *
     * @param {String} userId the user name as in ...@uni-potsdam.de
     * @param {Object} opts Optional parameters
     * @param {module:model/UserData} opts.body
     * @param {module:api/DefaultApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addUser = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling addUser";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checksIfUserExists operation.
     * @callback module:api/DefaultApi~checksIfUserExistsCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check if user exists in lms
     *
     * @param {String} userId
     * @param {Object} opts Optional parameters
     * @param {String} opts.password
     * @param {module:api/DefaultApi~checksIfUserExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.checksIfUserExists = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling checksIfUserExists";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api1/users/{userId}/exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commentCompetence operation.
     * @callback module:api/DefaultApi~commentCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * comment an competence attribution
     * The evidence attributing the competence acquisition to the activity is commented
     * @param {String} evidenceId
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentData} opts.body
     * @param {module:api/DefaultApi~commentCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.commentCompetence = function(evidenceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'evidenceId' is set
      if (evidenceId == undefined || evidenceId == null) {
        throw "Missing the required parameter 'evidenceId' when calling commentCompetence";
      }


      var pathParams = {
        'evidenceId': evidenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/evidences/{evidenceId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the commentCompetence_0 operation.
     * @callback module:api/DefaultApi~commentCompetence_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkId
     * @param {String} user
     * @param {String} courseContext
     * @param {String} role
     * @param {Object} opts Optional parameters
     * @param {String} opts.text
     * @param {module:api/DefaultApi~commentCompetence_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.commentCompetence_0 = function(linkId, user, courseContext, role, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'linkId' is set
      if (linkId == undefined || linkId == null) {
        throw "Missing the required parameter 'linkId' when calling commentCompetence_0";
      }

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw "Missing the required parameter 'user' when calling commentCompetence_0";
      }

      // verify the required parameter 'courseContext' is set
      if (courseContext == undefined || courseContext == null) {
        throw "Missing the required parameter 'courseContext' when calling commentCompetence_0";
      }

      // verify the required parameter 'role' is set
      if (role == undefined || role == null) {
        throw "Missing the required parameter 'role' when calling commentCompetence_0";
      }


      var pathParams = {
        'linkId': linkId,
        'user': user,
        'courseContext': courseContext,
        'role': role
      };
      var queryParams = {
        'text': opts['text']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/link/comment/{linkId}/{user}/{courseContext}/{role}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPrerequisite operation.
     * @callback module:api/DefaultApi~createPrerequisiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {Object} opts Optional parameters
     * @param {String} opts.linkedCompetence
     * @param {Array.<String>} opts.selectedCompetences
     * @param {module:api/DefaultApi~createPrerequisiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPrerequisite = function(course, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling createPrerequisite";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
        'linkedCompetence': opts['linkedCompetence'],
        'selectedCompetences': this.apiClient.buildCollectionParam(opts['selectedCompetences'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/prerequisite/create/{course}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSuggestedActivityForCompetence operation.
     * @callback module:api/DefaultApi~createSuggestedActivityForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} competenceId
     * @param {String} activityId
     * @param {module:api/DefaultApi~createSuggestedActivityForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createSuggestedActivityForCompetence = function(competenceId, activityId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling createSuggestedActivityForCompetence";
      }

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw "Missing the required parameter 'activityId' when calling createSuggestedActivityForCompetence";
      }


      var pathParams = {
        'competenceId': competenceId,
        'activityId': activityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/recommendations/competences/{competenceId}/activities/{activityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSuggestedActivityForCompetence_0 operation.
     * @callback module:api/DefaultApi~createSuggestedActivityForCompetence_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {String} opts.activityUrl
     * @param {module:api/DefaultApi~createSuggestedActivityForCompetence_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createSuggestedActivityForCompetence_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence'],
        'activityUrl': opts['activityUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/SuggestedActivityForCompetence/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSuggestedCourseForCompetence operation.
     * @callback module:api/DefaultApi~createSuggestedCourseForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {String} opts.course
     * @param {module:api/DefaultApi~createSuggestedCourseForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createSuggestedCourseForCompetence = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence'],
        'course': opts['course']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/SuggestedCourseForCompetence/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} user
     * @param {String} role
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupId
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createUser = function(user, role, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw "Missing the required parameter 'user' when calling createUser";
      }

      // verify the required parameter 'role' is set
      if (role == undefined || role == null) {
        throw "Missing the required parameter 'role' when calling createUser";
      }


      var pathParams = {
        'user': user,
        'role': role
      };
      var queryParams = {
        'groupId': opts['groupId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/user/create/{user}/{role}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCompetence operation.
     * @callback module:api/DefaultApi~deleteCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a db
     *
     * @param {String} competenceId the plain text string of the competence
     * @param {module:api/DefaultApi~deleteCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCompetence = function(competenceId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling deleteCompetence";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences/{competenceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCompetenceTree operation.
     * @callback module:api/DefaultApi~deleteCompetenceTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.competences
     * @param {module:api/DefaultApi~deleteCompetenceTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCompetenceTree = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competences': this.apiClient.buildCollectionParam(opts['competences'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/competence/deleteTree', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCompetence_0 operation.
     * @callback module:api/DefaultApi~deleteCompetence_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * hide competence for user
     *
     * @param {String} competenceId the plain text string of the competence to be hidden for the user
     * @param {String} userId
     * @param {module:api/DefaultApi~deleteCompetence_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCompetence_0 = function(competenceId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling deleteCompetence_0";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling deleteCompetence_0";
      }


      var pathParams = {
        'competenceId': competenceId,
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences/{competenceId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCompetence_1 operation.
     * @callback module:api/DefaultApi~deleteCompetence_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.competences
     * @param {module:api/DefaultApi~deleteCompetence_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCompetence_1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competences': this.apiClient.buildCollectionParam(opts['competences'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/competence/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourse operation.
     * @callback module:api/DefaultApi~deleteCourseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete local course in db
     * This will not delete a course in the lms since this would require different permissions and the interface is not implemented in the lms adaptor. This api should be used carefully since all the links to the course would also be deleted.
     * @param {String} courseId
     * @param {module:api/DefaultApi~deleteCourseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourse = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw "Missing the required parameter 'courseId' when calling deleteCourse";
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/courses/{courseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCourseContext operation.
     * @callback module:api/DefaultApi~deleteCourseContextCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {module:api/DefaultApi~deleteCourseContextCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCourseContext = function(course, callback) {
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling deleteCourseContext";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/coursecontext/delete/{course}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLearningTemplate operation.
     * @callback module:api/DefaultApi~deleteLearningTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a learning template
     *
     * @param {String} learningtemplateId
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {module:api/DefaultApi~deleteLearningTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLearningTemplate = function(learningtemplateId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'learningtemplateId' is set
      if (learningtemplateId == undefined || learningtemplateId == null) {
        throw "Missing the required parameter 'learningtemplateId' when calling deleteLearningTemplate";
      }


      var pathParams = {
        'learningtemplateId': learningtemplateId
      };
      var queryParams = {
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/learningtemplates/{learningtemplateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLearningTemplate_0 operation.
     * @callback module:api/DefaultApi~deleteLearningTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} learningTemplateName
     * @param {module:api/DefaultApi~deleteLearningTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLearningTemplate_0 = function(learningTemplateName, callback) {
      var postBody = null;

      // verify the required parameter 'learningTemplateName' is set
      if (learningTemplateName == undefined || learningTemplateName == null) {
        throw "Missing the required parameter 'learningTemplateName' when calling deleteLearningTemplate_0";
      }


      var pathParams = {
        'learningTemplateName': learningTemplateName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplate/delete/{learningTemplateName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLink operation.
     * @callback module:api/DefaultApi~deleteLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkId
     * @param {module:api/DefaultApi~deleteLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLink = function(linkId, callback) {
      var postBody = null;

      // verify the required parameter 'linkId' is set
      if (linkId == undefined || linkId == null) {
        throw "Missing the required parameter 'linkId' when calling deleteLink";
      }


      var pathParams = {
        'linkId': linkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/link/delete/{linkId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePrerequisite operation.
     * @callback module:api/DefaultApi~deletePrerequisiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {Object} opts Optional parameters
     * @param {String} opts.linkedCompetence
     * @param {Array.<String>} opts.competences
     * @param {module:api/DefaultApi~deletePrerequisiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePrerequisite = function(course, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling deletePrerequisite";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
        'linkedCompetence': opts['linkedCompetence'],
        'competences': this.apiClient.buildCollectionParam(opts['competences'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/prerequisite/delete/{course}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSelectedLearningTemplate operation.
     * @callback module:api/DefaultApi~deleteSelectedLearningTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.groupId
     * @param {String} opts.selectedTemplate
     * @param {module:api/DefaultApi~deleteSelectedLearningTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSelectedLearningTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'groupId': opts['groupId'],
        'selectedTemplate': opts['selectedTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplates/selected/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSuggestedActivityForCompetence operation.
     * @callback module:api/DefaultApi~deleteSuggestedActivityForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} competenceId
     * @param {String} activityId
     * @param {module:api/DefaultApi~deleteSuggestedActivityForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSuggestedActivityForCompetence = function(competenceId, activityId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling deleteSuggestedActivityForCompetence";
      }

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw "Missing the required parameter 'activityId' when calling deleteSuggestedActivityForCompetence";
      }


      var pathParams = {
        'competenceId': competenceId,
        'activityId': activityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/recommendations/competences/{competenceId}/activities/{activityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSuggestedActivityForCompetence_0 operation.
     * @callback module:api/DefaultApi~deleteSuggestedActivityForCompetence_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {String} opts.activityUrl
     * @param {module:api/DefaultApi~deleteSuggestedActivityForCompetence_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSuggestedActivityForCompetence_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence'],
        'activityUrl': opts['activityUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/SuggestedActivityForCompetence/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSuggestedCourseForCompetence operation.
     * @callback module:api/DefaultApi~deleteSuggestedCourseForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} competenceId
     * @param {String} courseId
     * @param {module:api/DefaultApi~deleteSuggestedCourseForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSuggestedCourseForCompetence = function(competenceId, courseId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling deleteSuggestedCourseForCompetence";
      }

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw "Missing the required parameter 'courseId' when calling deleteSuggestedCourseForCompetence";
      }


      var pathParams = {
        'competenceId': competenceId,
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/recommendations/competences/{competenceId}/courses/{courseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSuggestedCourseForCompetence_0 operation.
     * @callback module:api/DefaultApi~deleteSuggestedCourseForCompetence_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {String} opts.course
     * @param {module:api/DefaultApi~deleteSuggestedCourseForCompetence_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSuggestedCourseForCompetence_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence'],
        'course': opts['course']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/SuggestedCourseForCompetence/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete user in local db
     *
     * @param {String} userId
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling deleteUser";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesForUser operation.
     * @callback module:api/DefaultApi~getActivitiesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserTree>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get activities registered for the course id in the lms
     *
     * @param {String} courseId
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.password
     * @param {module:api/DefaultApi~getActivitiesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserTree>}
     */
    this.getActivitiesForUser = function(courseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw "Missing the required parameter 'courseId' when calling getActivitiesForUser";
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
        'userId': opts['userId'],
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [UserTree];

      return this.apiClient.callApi(
        '/api1/courses/{courseId}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesSuggestedForCompetence operation.
     * @callback module:api/DefaultApi~getActivitiesSuggestedForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the activity suggested for a competence
     *
     * @param {String} competenceId the id of the competence the activities are suggested for
     * @param {module:api/DefaultApi~getActivitiesSuggestedForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityEntry>}
     */
    this.getActivitiesSuggestedForCompetence = function(competenceId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling getActivitiesSuggestedForCompetence";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [ActivityEntry];

      return this.apiClient.callApi(
        '/api1/activities/competences/{competenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllLearningTemplates operation.
     * @callback module:api/DefaultApi~getAllLearningTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getAllLearningTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.getAllLearningTemplates = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/competences/learningtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBadgesForUser operation.
     * @callback module:api/DefaultApi~getBadgesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgeData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the badges the user has been awarded in the lms
     *
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.password
     * @param {module:api/DefaultApi~getBadgesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgeData>}
     */
    this.getBadgesForUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/json'];
      var returnType = [BadgeData];

      return this.apiClient.callApi(
        '/api1/progress/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatchwordTree operation.
     * @callback module:api/DefaultApi~getCatchwordTreeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CatchwordXMLTree>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.selectedCatchwords
     * @param {Array.<String>} opts.selectedOperators
     * @param {String} opts.learningTemplate
     * @param {module:api/DefaultApi~getCatchwordTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CatchwordXMLTree>}
     */
    this.getCatchwordTree = function(course, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling getCatchwordTree";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
        'selectedCatchwords': this.apiClient.buildCollectionParam(opts['selectedCatchwords'], 'multi'),
        'selectedOperators': this.apiClient.buildCollectionParam(opts['selectedOperators'], 'multi'),
        'learningTemplate': opts['learningTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [CatchwordXMLTree];

      return this.apiClient.callApi(
        '/competences/catchwordtree/{course}/{cache}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatchwordsForCompetence operation.
     * @callback module:api/DefaultApi~getCatchwordsForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {module:api/DefaultApi~getCatchwordsForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getCatchwordsForCompetence = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/competences/catchwords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetenceLinksMap operation.
     * @callback module:api/DefaultApi~getCompetenceLinksMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetenceLinksMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} user
     * @param {module:api/DefaultApi~getCompetenceLinksMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetenceLinksMap}
     */
    this.getCompetenceLinksMap = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw "Missing the required parameter 'user' when calling getCompetenceLinksMap";
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CompetenceLinksMap;

      return this.apiClient.callApi(
        '/competences/link/overview/{user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetenceTree operation.
     * @callback module:api/DefaultApi~getCompetenceTreeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompetenceXMLTree>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} context
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.selectedCatchwords
     * @param {Array.<String>} opts.selectedOperators
     * @param {String} opts.textFilter
     * @param {String} opts.rootCompetence
     * @param {String} opts.learningTemplate
     * @param {module:api/DefaultApi~getCompetenceTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompetenceXMLTree>}
     */
    this.getCompetenceTree = function(context, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'context' is set
      if (context == undefined || context == null) {
        throw "Missing the required parameter 'context' when calling getCompetenceTree";
      }


      var pathParams = {
        'context': context
      };
      var queryParams = {
        'selectedCatchwords': this.apiClient.buildCollectionParam(opts['selectedCatchwords'], 'multi'),
        'selectedOperators': this.apiClient.buildCollectionParam(opts['selectedOperators'], 'multi'),
        'textFilter': opts['textFilter'],
        'rootCompetence': opts['rootCompetence'],
        'learningTemplate': opts['learningTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [CompetenceXMLTree];

      return this.apiClient.callApi(
        '/competences/competencetree/{context}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetences operation.
     * @callback module:api/DefaultApi~getCompetencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get competences based on filter
     * Get all the competence descriptions stored in the database with filters specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.selectedCatchwords
     * @param {Array.<String>} opts.selectedOperators the verbs
     * @param {String} opts.textFilter
     * @param {String} opts.rootCompetence the plain text string of the topcompetence
     * @param {String} opts.courseId
     * @param {Boolean} opts.asTree
     * @param {String} opts.userId
     * @param {String} opts.learningTemplate
     * @param {module:api/DefaultApi~getCompetencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCompetences = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'selectedCatchwords': this.apiClient.buildCollectionParam(opts['selectedCatchwords'], 'multi'),
        'selectedOperators': this.apiClient.buildCollectionParam(opts['selectedOperators'], 'multi'),
        'textFilter': opts['textFilter'],
        'rootCompetence': opts['rootCompetence'],
        'courseId': opts['courseId'],
        'asTree': opts['asTree'],
        'userId': opts['userId'],
        'learningTemplate': opts['learningTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetencesForSuggestedActivity operation.
     * @callback module:api/DefaultApi~getCompetencesForSuggestedActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all the linked competences
     * This is the inverse call to suggesting an activity for a competence
     * @param {String} activityId the id of the activity queried
     * @param {module:api/DefaultApi~getCompetencesForSuggestedActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.getCompetencesForSuggestedActivity = function(activityId, callback) {
      var postBody = null;

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw "Missing the required parameter 'activityId' when calling getCompetencesForSuggestedActivity";
      }


      var pathParams = {
      };
      var queryParams = {
        'activityId': activityId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/api1/activities/links/competences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetencesForSuggestedActivity_0 operation.
     * @callback module:api/DefaultApi~getCompetencesForSuggestedActivity_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.activityUrl
     * @param {module:api/DefaultApi~getCompetencesForSuggestedActivity_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getCompetencesForSuggestedActivity_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'activityUrl': opts['activityUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/competences/CompetencesForSuggestedActivity/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetencesForUser operation.
     * @callback module:api/DefaultApi~getCompetencesForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get competences user has learned or is interested in
     *
     * @param {String} userId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.interestedIn
     * @param {module:api/DefaultApi~getCompetencesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.getCompetencesForUser = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getCompetencesForUser";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'interestedIn': opts['interestedIn']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/api1/users/{userId}/competences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCourses operation.
     * @callback module:api/DefaultApi~getCoursesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CourseData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get courses stored in db
     * does not yield courses of the use /users api for that as lms courses need authentication token of the user to be acquired
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.competence the competence the course is connected to, competence field will be null if no competence is specified since querying all competences is too much load
     * @param {module:api/DefaultApi~getCoursesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CourseData>}
     */
    this.getCourses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': this.apiClient.buildCollectionParam(opts['competence'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [CourseData];

      return this.apiClient.callApi(
        '/api1/courses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoursesForUser operation.
     * @callback module:api/DefaultApi~getCoursesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCourseListItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get courses from user in lms
     *
     * @param {String} userId
     * @param {Object} opts Optional parameters
     * @param {String} opts.password
     * @param {module:api/DefaultApi~getCoursesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCourseListItem>}
     */
    this.getCoursesForUser = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getCoursesForUser";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/json'];
      var returnType = [UserCourseListItem];

      return this.apiClient.callApi(
        '/api1/users/{userId}/courses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGridView operation.
     * @callback module:api/DefaultApi~getGridViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuggestedCompetenceGrid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.groupId
     * @param {String} opts.selectedTemplate
     * @param {module:api/DefaultApi~getGridViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuggestedCompetenceGrid}
     */
    this.getGridView = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'groupId': opts['groupId'],
        'selectedTemplate': opts['selectedTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = SuggestedCompetenceGrid;

      return this.apiClient.callApi(
        '/competences/learningtemplates/gridview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLearningTemplate operation.
     * @callback module:api/DefaultApi~getLearningTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearningTemplateResultSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} learningTemplateName
     * @param {module:api/DefaultApi~getLearningTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearningTemplateResultSet}
     */
    this.getLearningTemplate = function(learningTemplateName, callback) {
      var postBody = null;

      // verify the required parameter 'learningTemplateName' is set
      if (learningTemplateName == undefined || learningTemplateName == null) {
        throw "Missing the required parameter 'learningTemplateName' when calling getLearningTemplate";
      }


      var pathParams = {
        'learningTemplateName': learningTemplateName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = LearningTemplateResultSet;

      return this.apiClient.callApi(
        '/competences/learningtemplate/get/{learningTemplateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLearningTemplates operation.
     * @callback module:api/DefaultApi~getLearningTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all the learningtemplates.
     * If the user is specified only the users learning templates are queried.   Learning templates are aggregations of the competences a user wants to learn and their relationships. They can be looked at as learning trails as well as learning goals.
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {module:api/DefaultApi~getLearningTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.getLearningTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/api1/learningtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperatorForCompetence operation.
     * @callback module:api/DefaultApi~getOperatorForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {module:api/DefaultApi~getOperatorForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getOperatorForCompetence = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/competences/operator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperatorTree operation.
     * @callback module:api/DefaultApi~getOperatorTreeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OperatorXMLTree>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.selectedCatchwords
     * @param {Array.<String>} opts.selectedOperators
     * @param {String} opts.learningTemplate
     * @param {module:api/DefaultApi~getOperatorTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OperatorXMLTree>}
     */
    this.getOperatorTree = function(course, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling getOperatorTree";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
        'selectedCatchwords': this.apiClient.buildCollectionParam(opts['selectedCatchwords'], 'multi'),
        'selectedOperators': this.apiClient.buildCollectionParam(opts['selectedOperators'], 'multi'),
        'learningTemplate': opts['learningTemplate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [OperatorXMLTree];

      return this.apiClient.callApi(
        '/competences/operatortree/{course}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverviewForUser operation.
     * @callback module:api/DefaultApi~getOverviewForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get quick overview user about the user competences
     *
     * @param {String} userId
     * @param {module:api/DefaultApi~getOverviewForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOverview}
     */
    this.getOverviewForUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getOverviewForUser";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = UserOverview;

      return this.apiClient.callApi(
        '/api1/users/{userId}/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrerequisiteGraph operation.
     * @callback module:api/DefaultApi~getPrerequisiteGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.selectedCompetences
     * @param {module:api/DefaultApi~getPrerequisiteGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    this.getPrerequisiteGraph = function(course, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling getPrerequisiteGraph";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
        'selectedCompetences': this.apiClient.buildCollectionParam(opts['selectedCompetences'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Graph;

      return this.apiClient.callApi(
        '/competences/prerequisite/graph/{course}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgressM operation.
     * @callback module:api/DefaultApi~getProgressMCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'Number'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.competences
     * @param {module:api/DefaultApi~getProgressMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'Number'}>}
     */
    this.getProgressM = function(course, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling getProgressM";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
        'competences': this.apiClient.buildCollectionParam(opts['competences'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'Number'};

      return this.apiClient.callApi(
        '/competences/link/progress/{course}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReflectiveQuestionsAnswersForCompetence operation.
     * @callback module:api/DefaultApi~getReflectiveQuestionsAnswersForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReflectiveQuestionAnswerHolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get answers to this reflective question
     *
     * @param {String} questionId
     * @param {String} userId
     * @param {module:api/DefaultApi~getReflectiveQuestionsAnswersForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReflectiveQuestionAnswerHolder}
     */
    this.getReflectiveQuestionsAnswersForCompetence = function(questionId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId == undefined || questionId == null) {
        throw "Missing the required parameter 'questionId' when calling getReflectiveQuestionsAnswersForCompetence";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getReflectiveQuestionsAnswersForCompetence";
      }


      var pathParams = {
        'questionId': questionId,
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ReflectiveQuestionAnswerHolder;

      return this.apiClient.callApi(
        '/api1/competences/questions/{questionId}/answers/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReflectiveQuestionsForCompetence operation.
     * @callback module:api/DefaultApi~getReflectiveQuestionsForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get reflective questions stored for this competence
     *
     * @param {String} competenceId
     * @param {module:api/DefaultApi~getReflectiveQuestionsForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.getReflectiveQuestionsForCompetence = function(competenceId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling getReflectiveQuestionsForCompetence";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/api1/competences/{competenceId}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequiredCompetences operation.
     * @callback module:api/DefaultApi~getRequiredCompetencesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {module:api/DefaultApi~getRequiredCompetencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getRequiredCompetences = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/competences/prerequisite/required/{course}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequirements operation.
     * @callback module:api/DefaultApi~getRequirementsCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} course
     * @param {module:api/DefaultApi~getRequirementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getRequirements = function(course, callback) {
      var postBody = null;

      // verify the required parameter 'course' is set
      if (course == undefined || course == null) {
        throw "Missing the required parameter 'course' when calling getRequirements";
      }


      var pathParams = {
        'course': course
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/competences/coursecontext/requirements/{course}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelectedLearningTemplates operation.
     * @callback module:api/DefaultApi~getSelectedLearningTemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.groupId
     * @param {module:api/DefaultApi~getSelectedLearningTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSelectedLearningTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'groupId': opts['groupId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplates/selected', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestedActivityForCompetence operation.
     * @callback module:api/DefaultApi~getSuggestedActivityForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {module:api/DefaultApi~getSuggestedActivityForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getSuggestedActivityForCompetence = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/competences/SuggestedActivityForCompetence/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestedCompetencesForCourse operation.
     * @callback module:api/DefaultApi~getSuggestedCompetencesForCourseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} courseId
     * @param {module:api/DefaultApi~getSuggestedCompetencesForCourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getSuggestedCompetencesForCourse = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw "Missing the required parameter 'courseId' when calling getSuggestedCompetencesForCourse";
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api1/recommendations/courses/{courseId}/competences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestedCompetencesForCourse_0 operation.
     * @callback module:api/DefaultApi~getSuggestedCompetencesForCourse_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} courseId
     * @param {module:api/DefaultApi~getSuggestedCompetencesForCourse_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getSuggestedCompetencesForCourse_0 = function(courseId, callback) {
      var postBody = null;

      // verify the required parameter 'courseId' is set
      if (courseId == undefined || courseId == null) {
        throw "Missing the required parameter 'courseId' when calling getSuggestedCompetencesForCourse_0";
      }


      var pathParams = {
        'courseId': courseId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/competences/SuggestedCompetencesForCourse/{courseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestedCoursesForCompetence operation.
     * @callback module:api/DefaultApi~getSuggestedCoursesForCompetenceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} competenceId
     * @param {module:api/DefaultApi~getSuggestedCoursesForCompetenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getSuggestedCoursesForCompetence = function(competenceId, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling getSuggestedCoursesForCompetence";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api1/recommendations/competences/{competenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestedCoursesForCompetence_0 operation.
     * @callback module:api/DefaultApi~getSuggestedCoursesForCompetence_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.competence
     * @param {module:api/DefaultApi~getSuggestedCoursesForCompetence_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getSuggestedCoursesForCompetence_0 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'competence': opts['competence']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/competences/SuggestedCourseForCompetence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemsUserIsEnrolledIn operation.
     * @callback module:api/DefaultApi~getSystemsUserIsEnrolledInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get lms user is enrolled in
     *
     * @param {String} userId
     * @param {Object} opts Optional parameters
     * @param {String} opts.password
     * @param {module:api/DefaultApi~getSystemsUserIsEnrolledInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.getSystemsUserIsEnrolledIn = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getSystemsUserIsEnrolledIn";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/api1/users/{userId}/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get full user details from local db
     *
     * @param {String} userId the user name as in ...@uni-potsdam.de
     * @param {module:api/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getUser";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserCompetenceProgress operation.
     * @callback module:api/DefaultApi~getUserCompetenceProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCompetenceProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the progress of a user for the competence given
     *
     * @param {String} userId
     * @param {String} competenceId
     * @param {module:api/DefaultApi~getUserCompetenceProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCompetenceProgress}
     */
    this.getUserCompetenceProgress = function(userId, competenceId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getUserCompetenceProgress";
      }

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling getUserCompetenceProgress";
      }


      var pathParams = {
        'userId': userId,
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = UserCompetenceProgress;

      return this.apiClient.callApi(
        '/api1/progress/{userId}/competences/{competenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProgress operation.
     * @callback module:api/DefaultApi~getUserProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the progress of a user
     *
     * @param {String} userId
     * @param {Object} opts Optional parameters
     * @param {String} opts.courseId
     * @param {module:api/DefaultApi~getUserProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProgress}
     */
    this.getUserProgress = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getUserProgress";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'courseId': opts['courseId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = UserProgress;

      return this.apiClient.callApi(
        '/api1/progress/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/DefaultApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get full user details from local db and if provided with authentication from the lms
     *
     * @param {Object} opts Optional parameters
     * @param {String} opts.userName the user name as in ...@uni-potsdam.de
     * @param {String} opts.password
     * @param {module:api/DefaultApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserData>}
     */
    this.getUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userName': opts['userName'],
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [UserData];

      return this.apiClient.callApi(
        '/api1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importEpos operation.
     * @callback module:api/DefaultApi~importEposCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EPOSTypeWrapper} opts.body
     * @param {module:api/DefaultApi~importEposCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importEpos = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplates/addEpos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inValidateLink operation.
     * @callback module:api/DefaultApi~inValidateLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * invalidate the evidence
     *
     * @param {String} evidenceId
     * @param {module:api/DefaultApi~inValidateLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.inValidateLink = function(evidenceId, callback) {
      var postBody = null;

      // verify the required parameter 'evidenceId' is set
      if (evidenceId == undefined || evidenceId == null) {
        throw "Missing the required parameter 'evidenceId' when calling inValidateLink";
      }


      var pathParams = {
        'evidenceId': evidenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/evidences/{evidenceId}/invalidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invalidateLink operation.
     * @callback module:api/DefaultApi~invalidateLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkId
     * @param {module:api/DefaultApi~invalidateLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.invalidateLink = function(linkId, callback) {
      var postBody = null;

      // verify the required parameter 'linkId' is set
      if (linkId == undefined || linkId == null) {
        throw "Missing the required parameter 'linkId' when calling invalidateLink";
      }


      var pathParams = {
        'linkId': linkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/link/invalidate/{linkId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the linkCompetencesToUser2 operation.
     * @callback module:api/DefaultApi~linkCompetencesToUser2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add an evidence for a competence and a user
     * the course and the user referenced must exist in database beforehand
     * @param {Object} opts Optional parameters
     * @param {module:model/EvidenceData} opts.body
     * @param {module:api/DefaultApi~linkCompetencesToUser2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.linkCompetencesToUser2 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/evidences/create', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendActivities operation.
     * @callback module:api/DefaultApi~recommendActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'Number'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userEmail
     * @param {Object} opts Optional parameters
     * @param {String} opts.competenceToReach
     * @param {String} opts.courseId
     * @param {String} opts.password
     * @param {module:api/DefaultApi~recommendActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'Number'}>}
     */
    this.recommendActivities = function(userEmail, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userEmail' is set
      if (userEmail == undefined || userEmail == null) {
        throw "Missing the required parameter 'userEmail' when calling recommendActivities";
      }


      var pathParams = {
        'userEmail': userEmail
      };
      var queryParams = {
        'competenceToReach': opts['competenceToReach'],
        'courseId': opts['courseId'],
        'password': opts['password']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = {'String': 'Number'};

      return this.apiClient.callApi(
        '/api1/recommendations/activities/{userEmail}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendCompetences operation.
     * @callback module:api/DefaultApi~recommendCompetencesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'Number'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userEmail
     * @param {Object} opts Optional parameters
     * @param {String} opts.competenceToReach
     * @param {String} opts.courseId
     * @param {module:api/DefaultApi~recommendCompetencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'Number'}>}
     */
    this.recommendCompetences = function(userEmail, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userEmail' is set
      if (userEmail == undefined || userEmail == null) {
        throw "Missing the required parameter 'userEmail' when calling recommendCompetences";
      }


      var pathParams = {
        'userEmail': userEmail
      };
      var queryParams = {
        'competenceToReach': opts['competenceToReach'],
        'courseId': opts['courseId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = {'String': 'Number'};

      return this.apiClient.callApi(
        '/api1/recommendations/competences/{userEmail}/competences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendCourses operation.
     * @callback module:api/DefaultApi~recommendCoursesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MapWrapperUserCourseListItemDouble} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userEmail
     * @param {module:api/DefaultApi~recommendCoursesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MapWrapperUserCourseListItemDouble}
     */
    this.recommendCourses = function(userEmail, callback) {
      var postBody = null;

      // verify the required parameter 'userEmail' is set
      if (userEmail == undefined || userEmail == null) {
        throw "Missing the required parameter 'userEmail' when calling recommendCourses";
      }


      var pathParams = {
        'userEmail': userEmail
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = MapWrapperUserCourseListItemDouble;

      return this.apiClient.callApi(
        '/api1/recommendations/courses/{userEmail}/courses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCompetencesForUser operation.
     * @callback module:api/DefaultApi~setCompetencesForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add competences user is interested in
     *
     * @param {String} userId
     * @param {String} competenceId
     * @param {module:api/DefaultApi~setCompetencesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setCompetencesForUser = function(userId, competenceId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling setCompetencesForUser";
      }

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling setCompetencesForUser";
      }


      var pathParams = {
        'userId': userId,
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/users/{userId}/interests/competences/{competenceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the similarCompetences operation.
     * @callback module:api/DefaultApi~similarCompetencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get similar competences (to avoid redundancy)
     *
     * @param {String} competenceId the plain text string of the competence
     * @param {Boolean} firstRun if this is the first query on semblances it should be called sequentially
     * @param {module:api/DefaultApi~similarCompetencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    this.similarCompetences = function(competenceId, firstRun, callback) {
      var postBody = null;

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling similarCompetences";
      }

      // verify the required parameter 'firstRun' is set
      if (firstRun == undefined || firstRun == null) {
        throw "Missing the required parameter 'firstRun' when calling similarCompetences";
      }


      var pathParams = {
        'competenceId': competenceId
      };
      var queryParams = {
        'firstRun': firstRun
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = StringList;

      return this.apiClient.callApi(
        '/api1/competences/semblances/{competenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncUser operation.
     * @callback module:api/DefaultApi~syncUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns true if success, false if user does not exist in lms or complex requests do not span 40 sec.
     *
     * @param {String} lmssystem
     * @param {Object} opts Optional parameters
     * @param {module:model/SyncDataSet} opts.body
     * @param {module:api/DefaultApi~syncUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.syncUser = function(lmssystem, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'lmssystem' is set
      if (lmssystem == undefined || lmssystem == null) {
        throw "Missing the required parameter 'lmssystem' when calling syncUser";
      }


      var pathParams = {
        'lmssystem': lmssystem
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/users/sync/{lmssystem}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCatchword operation.
     * @callback module:api/DefaultApi~updateCatchwordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clazz
     * @param {String} oldId
     * @param {String} newId
     * @param {module:api/DefaultApi~updateCatchwordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCatchword = function(clazz, oldId, newId, callback) {
      var postBody = null;

      // verify the required parameter 'clazz' is set
      if (clazz == undefined || clazz == null) {
        throw "Missing the required parameter 'clazz' when calling updateCatchword";
      }

      // verify the required parameter 'oldId' is set
      if (oldId == undefined || oldId == null) {
        throw "Missing the required parameter 'oldId' when calling updateCatchword";
      }

      // verify the required parameter 'newId' is set
      if (newId == undefined || newId == null) {
        throw "Missing the required parameter 'newId' when calling updateCatchword";
      }


      var pathParams = {
        'clazz': clazz,
        'oldId': oldId,
        'newId': newId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/update/{clazz}/{oldId}/{newId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGridView operation.
     * @callback module:api/DefaultApi~updateGridViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId
     * @param {String} opts.groupId
     * @param {module:model/ReflectiveAssessmentsListHolder} opts.body
     * @param {module:api/DefaultApi~updateGridViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateGridView = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'groupId': opts['groupId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/learningtemplates/gridview/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHierarchie operation.
     * @callback module:api/DefaultApi~updateHierarchieCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.changes
     * @param {module:api/DefaultApi~updateHierarchieCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateHierarchie = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'changes': this.apiClient.buildCollectionParam(opts['changes'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/updateHierarchie', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHierarchie2 operation.
     * @callback module:api/DefaultApi~updateHierarchie2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.changes
     * @param {module:api/DefaultApi~updateHierarchie2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateHierarchie2 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'changes': opts['changes']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/updateHierarchie2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHierarchieExample operation.
     * @callback module:api/DefaultApi~updateHierarchieExampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HierarchyChangeSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.changes
     * @param {module:api/DefaultApi~updateHierarchieExampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HierarchyChangeSet}
     */
    this.updateHierarchieExample = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'changes': opts['changes']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HierarchyChangeSet;

      return this.apiClient.callApi(
        '/competences/updateHierarchie2/example', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHierarchy operation.
     * @callback module:api/DefaultApi~updateHierarchyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * change the superclass for a node selected.
     * If the old class superclass is null a new superclass will be added. This should not be used to add new competences to the database.
     * @param {Object} opts Optional parameters
     * @param {module:model/HierarchyChangeSet} opts.body
     * @param {module:api/DefaultApi~updateHierarchyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateHierarchy = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/competences/hierarchy/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateUserProgress operation.
     * @callback module:api/DefaultApi~updateOrCreateUserProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update the progress of a user
     *
     * @param {String} userId
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProgress} opts.body
     * @param {module:api/DefaultApi~updateOrCreateUserProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateOrCreateUserProgress = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling updateOrCreateUserProgress";
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/progress/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrCreateUserProgress_0 operation.
     * @callback module:api/DefaultApi~updateOrCreateUserProgress_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update the progress of a user for the competence given
     *
     * @param {String} userId
     * @param {String} competenceId
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCompetenceProgress} opts.body
     * @param {module:api/DefaultApi~updateOrCreateUserProgress_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateOrCreateUserProgress_0 = function(userId, competenceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling updateOrCreateUserProgress_0";
      }

      // verify the required parameter 'competenceId' is set
      if (competenceId == undefined || competenceId == null) {
        throw "Missing the required parameter 'competenceId' when calling updateOrCreateUserProgress_0";
      }


      var pathParams = {
        'userId': userId,
        'competenceId': competenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/progress/{userId}/competences/{competenceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validateLink operation.
     * @callback module:api/DefaultApi~validateLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate the evidence
     *
     * @param {String} evidenceId
     * @param {module:api/DefaultApi~validateLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.validateLink = function(evidenceId, callback) {
      var postBody = null;

      // verify the required parameter 'evidenceId' is set
      if (evidenceId == undefined || evidenceId == null) {
        throw "Missing the required parameter 'evidenceId' when calling validateLink";
      }


      var pathParams = {
        'evidenceId': evidenceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api1/evidences/{evidenceId}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validateLink_0 operation.
     * @callback module:api/DefaultApi~validateLink_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkId
     * @param {module:api/DefaultApi~validateLink_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.validateLink_0 = function(linkId, callback) {
      var postBody = null;

      // verify the required parameter 'linkId' is set
      if (linkId == undefined || linkId == null) {
        throw "Missing the required parameter 'linkId' when calling validateLink_0";
      }


      var pathParams = {
        'linkId': linkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/competences/link/validate/{linkId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
