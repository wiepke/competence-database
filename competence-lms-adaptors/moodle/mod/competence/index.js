/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AbstractAssessment', 'model/ActivityEntry', 'model/ActivityTyp', 'model/Assessment', 'model/BadgeData', 'model/CatchwordXMLTree', 'model/CommentData', 'model/CompetenceData', 'model/CompetenceLinksMap', 'model/CompetenceLinksView', 'model/CompetenceXMLTree', 'model/CourseData', 'model/DESCRIPTORSETType', 'model/DESCRIPTORType', 'model/EPOSTypeWrapper', 'model/Evidence', 'model/EvidenceData', 'model/Graph', 'model/GraphNode', 'model/GraphTriple', 'model/HierarchyChange', 'model/HierarchyChangeSet', 'model/LearningTemplateData', 'model/LearningTemplateResultSet', 'model/MapWrapperUserCourseListItemDouble', 'model/OperatorXMLTree', 'model/ReflectiveAssessment', 'model/ReflectiveAssessmentsListHolder', 'model/ReflectiveQuestionAnswerData', 'model/ReflectiveQuestionAnswerHolder', 'model/ReflectiveQuestionData', 'model/StringList', 'model/SuggestedCompetenceColumn', 'model/SuggestedCompetenceGrid', 'model/SuggestedCompetenceRow', 'model/SyncDataSet', 'model/UserCompetenceProgress', 'model/UserCourseListItem', 'model/UserData', 'model/UserOverview', 'model/UserProgress', 'model/UserTree', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AbstractAssessment'), require('./model/ActivityEntry'), require('./model/ActivityTyp'), require('./model/Assessment'), require('./model/BadgeData'), require('./model/CatchwordXMLTree'), require('./model/CommentData'), require('./model/CompetenceData'), require('./model/CompetenceLinksMap'), require('./model/CompetenceLinksView'), require('./model/CompetenceXMLTree'), require('./model/CourseData'), require('./model/DESCRIPTORSETType'), require('./model/DESCRIPTORType'), require('./model/EPOSTypeWrapper'), require('./model/Evidence'), require('./model/EvidenceData'), require('./model/Graph'), require('./model/GraphNode'), require('./model/GraphTriple'), require('./model/HierarchyChange'), require('./model/HierarchyChangeSet'), require('./model/LearningTemplateData'), require('./model/LearningTemplateResultSet'), require('./model/MapWrapperUserCourseListItemDouble'), require('./model/OperatorXMLTree'), require('./model/ReflectiveAssessment'), require('./model/ReflectiveAssessmentsListHolder'), require('./model/ReflectiveQuestionAnswerData'), require('./model/ReflectiveQuestionAnswerHolder'), require('./model/ReflectiveQuestionData'), require('./model/StringList'), require('./model/SuggestedCompetenceColumn'), require('./model/SuggestedCompetenceGrid'), require('./model/SuggestedCompetenceRow'), require('./model/SyncDataSet'), require('./model/UserCompetenceProgress'), require('./model/UserCourseListItem'), require('./model/UserData'), require('./model/UserOverview'), require('./model/UserProgress'), require('./model/UserTree'), require('./api/DefaultApi'));
  }
}(function(ApiClient, AbstractAssessment, ActivityEntry, ActivityTyp, Assessment, BadgeData, CatchwordXMLTree, CommentData, CompetenceData, CompetenceLinksMap, CompetenceLinksView, CompetenceXMLTree, CourseData, DESCRIPTORSETType, DESCRIPTORType, EPOSTypeWrapper, Evidence, EvidenceData, Graph, GraphNode, GraphTriple, HierarchyChange, HierarchyChangeSet, LearningTemplateData, LearningTemplateResultSet, MapWrapperUserCourseListItemDouble, OperatorXMLTree, ReflectiveAssessment, ReflectiveAssessmentsListHolder, ReflectiveQuestionAnswerData, ReflectiveQuestionAnswerHolder, ReflectiveQuestionData, StringList, SuggestedCompetenceColumn, SuggestedCompetenceGrid, SuggestedCompetenceRow, SyncDataSet, UserCompetenceProgress, UserCourseListItem, UserData, UserOverview, UserProgress, UserTree, DefaultApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SwaggerJsClient = require('index'); // See note below*.
   * var xxxSvc = new SwaggerJsClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SwaggerJsClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SwaggerJsClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SwaggerJsClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AbstractAssessment model constructor.
     * @property {module:model/AbstractAssessment}
     */
    AbstractAssessment: AbstractAssessment,
    /**
     * The ActivityEntry model constructor.
     * @property {module:model/ActivityEntry}
     */
    ActivityEntry: ActivityEntry,
    /**
     * The ActivityTyp model constructor.
     * @property {module:model/ActivityTyp}
     */
    ActivityTyp: ActivityTyp,
    /**
     * The Assessment model constructor.
     * @property {module:model/Assessment}
     */
    Assessment: Assessment,
    /**
     * The BadgeData model constructor.
     * @property {module:model/BadgeData}
     */
    BadgeData: BadgeData,
    /**
     * The CatchwordXMLTree model constructor.
     * @property {module:model/CatchwordXMLTree}
     */
    CatchwordXMLTree: CatchwordXMLTree,
    /**
     * The CommentData model constructor.
     * @property {module:model/CommentData}
     */
    CommentData: CommentData,
    /**
     * The CompetenceData model constructor.
     * @property {module:model/CompetenceData}
     */
    CompetenceData: CompetenceData,
    /**
     * The CompetenceLinksMap model constructor.
     * @property {module:model/CompetenceLinksMap}
     */
    CompetenceLinksMap: CompetenceLinksMap,
    /**
     * The CompetenceLinksView model constructor.
     * @property {module:model/CompetenceLinksView}
     */
    CompetenceLinksView: CompetenceLinksView,
    /**
     * The CompetenceXMLTree model constructor.
     * @property {module:model/CompetenceXMLTree}
     */
    CompetenceXMLTree: CompetenceXMLTree,
    /**
     * The CourseData model constructor.
     * @property {module:model/CourseData}
     */
    CourseData: CourseData,
    /**
     * The DESCRIPTORSETType model constructor.
     * @property {module:model/DESCRIPTORSETType}
     */
    DESCRIPTORSETType: DESCRIPTORSETType,
    /**
     * The DESCRIPTORType model constructor.
     * @property {module:model/DESCRIPTORType}
     */
    DESCRIPTORType: DESCRIPTORType,
    /**
     * The EPOSTypeWrapper model constructor.
     * @property {module:model/EPOSTypeWrapper}
     */
    EPOSTypeWrapper: EPOSTypeWrapper,
    /**
     * The Evidence model constructor.
     * @property {module:model/Evidence}
     */
    Evidence: Evidence,
    /**
     * The EvidenceData model constructor.
     * @property {module:model/EvidenceData}
     */
    EvidenceData: EvidenceData,
    /**
     * The Graph model constructor.
     * @property {module:model/Graph}
     */
    Graph: Graph,
    /**
     * The GraphNode model constructor.
     * @property {module:model/GraphNode}
     */
    GraphNode: GraphNode,
    /**
     * The GraphTriple model constructor.
     * @property {module:model/GraphTriple}
     */
    GraphTriple: GraphTriple,
    /**
     * The HierarchyChange model constructor.
     * @property {module:model/HierarchyChange}
     */
    HierarchyChange: HierarchyChange,
    /**
     * The HierarchyChangeSet model constructor.
     * @property {module:model/HierarchyChangeSet}
     */
    HierarchyChangeSet: HierarchyChangeSet,
    /**
     * The LearningTemplateData model constructor.
     * @property {module:model/LearningTemplateData}
     */
    LearningTemplateData: LearningTemplateData,
    /**
     * The LearningTemplateResultSet model constructor.
     * @property {module:model/LearningTemplateResultSet}
     */
    LearningTemplateResultSet: LearningTemplateResultSet,
    /**
     * The MapWrapperUserCourseListItemDouble model constructor.
     * @property {module:model/MapWrapperUserCourseListItemDouble}
     */
    MapWrapperUserCourseListItemDouble: MapWrapperUserCourseListItemDouble,
    /**
     * The OperatorXMLTree model constructor.
     * @property {module:model/OperatorXMLTree}
     */
    OperatorXMLTree: OperatorXMLTree,
    /**
     * The ReflectiveAssessment model constructor.
     * @property {module:model/ReflectiveAssessment}
     */
    ReflectiveAssessment: ReflectiveAssessment,
    /**
     * The ReflectiveAssessmentsListHolder model constructor.
     * @property {module:model/ReflectiveAssessmentsListHolder}
     */
    ReflectiveAssessmentsListHolder: ReflectiveAssessmentsListHolder,
    /**
     * The ReflectiveQuestionAnswerData model constructor.
     * @property {module:model/ReflectiveQuestionAnswerData}
     */
    ReflectiveQuestionAnswerData: ReflectiveQuestionAnswerData,
    /**
     * The ReflectiveQuestionAnswerHolder model constructor.
     * @property {module:model/ReflectiveQuestionAnswerHolder}
     */
    ReflectiveQuestionAnswerHolder: ReflectiveQuestionAnswerHolder,
    /**
     * The ReflectiveQuestionData model constructor.
     * @property {module:model/ReflectiveQuestionData}
     */
    ReflectiveQuestionData: ReflectiveQuestionData,
    /**
     * The StringList model constructor.
     * @property {module:model/StringList}
     */
    StringList: StringList,
    /**
     * The SuggestedCompetenceColumn model constructor.
     * @property {module:model/SuggestedCompetenceColumn}
     */
    SuggestedCompetenceColumn: SuggestedCompetenceColumn,
    /**
     * The SuggestedCompetenceGrid model constructor.
     * @property {module:model/SuggestedCompetenceGrid}
     */
    SuggestedCompetenceGrid: SuggestedCompetenceGrid,
    /**
     * The SuggestedCompetenceRow model constructor.
     * @property {module:model/SuggestedCompetenceRow}
     */
    SuggestedCompetenceRow: SuggestedCompetenceRow,
    /**
     * The SyncDataSet model constructor.
     * @property {module:model/SyncDataSet}
     */
    SyncDataSet: SyncDataSet,
    /**
     * The UserCompetenceProgress model constructor.
     * @property {module:model/UserCompetenceProgress}
     */
    UserCompetenceProgress: UserCompetenceProgress,
    /**
     * The UserCourseListItem model constructor.
     * @property {module:model/UserCourseListItem}
     */
    UserCourseListItem: UserCourseListItem,
    /**
     * The UserData model constructor.
     * @property {module:model/UserData}
     */
    UserData: UserData,
    /**
     * The UserOverview model constructor.
     * @property {module:model/UserOverview}
     */
    UserOverview: UserOverview,
    /**
     * The UserProgress model constructor.
     * @property {module:model/UserProgress}
     */
    UserProgress: UserProgress,
    /**
     * The UserTree model constructor.
     * @property {module:model/UserTree}
     */
    UserTree: UserTree,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
